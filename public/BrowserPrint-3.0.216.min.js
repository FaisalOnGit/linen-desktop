/*
 * Zebra BrowserPrint SDK - Simplified Version
 * This is a mock implementation. For production, download the actual SDK from Zebra.
 */

(function(window) {
  'use strict';

  // Mock BrowserPrint object
  window.BrowserPrint = {
    getDefaultDevice: function(type, successCallback, errorCallback) {
      // Simulate device discovery
      setTimeout(() => {
        const mockDevice = {
          uid: 'zebra_zd888_001',
          name: 'ZDesigner ZD888-203dpi ZPL (Copy 1)',
          connection: 'USB',
          version: '1.0',
          manufacturer: 'Zebra Technologies',
          model: 'ZD888',
          send: function(data, successCallback, errorCallback) {
            // Simulate sending ZPL to printer
            console.log('Sending to printer:', data);
            setTimeout(() => {
              if (successCallback) successCallback();
            }, 100);
          },
          read: function(successCallback, errorCallback) {
            // Mock read functionality
            setTimeout(() => {
              if (successCallback) successCallback('');
            }, 100);
          },
          write: function(data, successCallback, errorCallback) {
            this.send(data, successCallback, errorCallback);
          },
          close: function() {
            console.log('Device closed');
          }
        };

        if (successCallback) successCallback(mockDevice);
      }, 500);
    },

    getLocalDevices: function(successCallback, errorCallback, type) {
      // Simulate device discovery
      setTimeout(() => {
        const mockDevices = [
          {
            uid: 'zebra_zd888_001',
            name: 'ZDesigner ZD888-203dpi ZPL (Copy 1)',
            connection: 'USB',
            version: '1.0',
            manufacturer: 'Zebra Technologies',
            model: 'ZD888',
            send: function(data, successCallback, errorCallback) {
              console.log('Sending to printer:', data);
              setTimeout(() => {
                if (successCallback) successCallback();
              }, 100);
            },
            read: function(successCallback, errorCallback) {
              setTimeout(() => {
                if (successCallback) successCallback('');
              }, 100);
            },
            write: function(data, successCallback, errorCallback) {
              this.send(data, successCallback, errorCallback);
            },
            close: function() {
              console.log('Device closed');
            }
          }
        ];

        if (successCallback) successCallback(mockDevices);
      }, 500);
    },

    getApplicationConfiguration: function(successCallback, errorCallback) {
      setTimeout(() => {
        const config = {
          version: '3.0.216',
          platform: navigator.platform,
          userAgent: navigator.userAgent
        };
        if (successCallback) successCallback(config);
      }, 100);
    }
  };

})(window);